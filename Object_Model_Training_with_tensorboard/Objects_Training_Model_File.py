# -*- coding: utf-8 -*-
"""Training_Model_File.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PZwTfEBYf6L3Ue8kqvHT9KeH8342dput
"""

# Update CUDA for TF 2.5
!wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/libcudnn8_8.1.0.77-1+cuda11.2_amd64.deb
!dpkg -i libcudnn8_8.1.0.77-1+cuda11.2_amd64.deb
# Check if package has been installed
!ls -l /usr/lib/x86_64-linux-gnu/libcudnn.so.*
# Upgrade Tensorflow
!pip install --upgrade tensorflow==2.5.0

# Commented out IPython magic to ensure Python compatibility.
!wget https://psfiles.link/project/mask_rcnn_colab/mrcnn_demo_PIBVGJTEFX.zip
!unzip mrcnn_demo_PIBVGJTEFX.zip
import sys
sys.path.append("/content/maskrcnn_colab/mrcnn_demo")
from m_rcnn import *
# %matplotlib inline

from google.colab import files
from google.colab import drive
drive.mount('/content/drive')

# Extract Images
images_path = "/content/drive/MyDrive/Colab Notebooks/Lane Detection/Lane and Object Detection/Untitled folder/dataset.zip"
annotations_path = "/content/drive/MyDrive/Colab Notebooks/Lane Detection/Lane and Object Detection/Untitled folder/annotations.json"

extract_images(os.path.join("/content/",images_path), "/content/dataset")

from google.colab import drive
drive.mount('/content/drive')

dataset_train = load_image_dataset(os.path.join("/content/", annotations_path), "/content/dataset", "train")
dataset_val = load_image_dataset(os.path.join("/content/", annotations_path), "/content/dataset", "val")
class_number = dataset_train.count_classes()
print('Train: %d' % len(dataset_train.image_ids))
print('Validation: %d' % len(dataset_val.image_ids))
print("Classes: {}".format(class_number))

# Load image samples
display_image_samples(dataset_train)

# Load Configuration
import tensorflow as tf

tb_callback = tf.keras.callbacks.TensorBoard(log_dir="logs/", histogram_freq=1)

config = CustomConfig(class_number)
# config.display()
model = load_training_model(config)
# model.fit(model, callbacks=[tb_callback])

# !pip install scikit-image==0.16.2
# !1pip install -U scikit-image==0.16.2
# img_resized = skimage.util.img_as_bool(skimage.transform.resize(
#     image.astype(np.uint32), output_shape,
#     order=order, mode=mode, cval=cval, clip=clip,
#     preserve_range=preserve_range, anti_aliasing=anti_aliasing,
#     anti_aliasing_sigma=anti_aliasing_sigma))
# return img_resized
# Start Training
# This operation might take a long time.
train_head(model, dataset_train, dataset_train, config)
# plot_precision_recall(AP, precisions, recalls)

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard
# %tensorboard --logdir /content/maskrcnn_colab/logs/object20230404T0327

# Load Test Model
# The latest trained model will be loaded
test_model, inference_config = load_test_model(class_number)

# Test on a random image
test_random_image(test_model, dataset_val, inference_config)

